{"version":3,"sources":["components/presentational/Name/index.js","components/presentational/SocialLink/index.js","components/presentational/Description/index.js","components/App.js","serviceWorker.js","index.js"],"names":["Name","className","TYPES","EMAIL","GITHUB","LINKEDIN","SOCIAL","icon","link","text","SocialLink","props","href","type","target","rel","Description","library","add","fab","faEnvelopeSquare","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAYeA,MARf,WACE,OACE,yBAAKC,UAAU,QAAf,e,OCDSC,G,MAAQ,CACnBC,MAAO,QACPC,OAAQ,SACRC,SAAU,aAGCC,EAAS,CACpBH,MAAO,CACLI,KAAM,kBACNC,KAAM,2BACNC,KAAM,SAERL,OAAQ,CACNG,KAAM,CAAC,MAAO,iBACdC,KAAM,8BACNC,KAAM,UAERJ,SAAU,CACRE,KAAM,CAAC,MAAO,YACdC,KAAM,qCACNC,KAAM,aAmBKC,MAff,SAAoBC,GAClB,OACE,uBACEV,UAAU,aACVW,KAAMN,EAAOK,EAAME,MAAML,KACzBM,OAAO,SACPC,IAAI,uBAEJ,yBAAKd,UAAU,kBACb,kBAAC,IAAD,CAAiBM,KAAMD,EAAOK,EAAME,MAAMN,U,MCvBnCS,MAVf,WACE,OACE,yBAAKf,UAAU,eACb,kBAAC,EAAD,CAAYY,KAAMX,EAAMG,WACxB,kBAAC,EAAD,CAAYQ,KAAMX,EAAME,SACxB,kBAAC,EAAD,CAAYS,KAAMX,EAAMC,U,MCD9Bc,IAAQC,IAAIC,IAAKC,KAWFC,MATf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1ac93221.chunk.js","sourcesContent":["import React from 'react';\n\nimport './index.css';\n\nfunction Name() {\n  return (\n    <div className=\"Name\">\n      Eli Cooper\n    </div>\n  );\n}\n\nexport default Name;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './index.css';\n\nexport const TYPES = {\n  EMAIL: 'EMAIL',\n  GITHUB: 'GITHUB',\n  LINKEDIN: 'LINKEDIN',\n};\n\nexport const SOCIAL = {\n  EMAIL: {\n    icon: 'envelope-square',\n    link: 'mailto:eli@elicooper.com',\n    text: 'Email',\n  },\n  GITHUB: {\n    icon: ['fab', 'github-square'],\n    link: 'https://github.com/e-cooper',\n    text: 'Github',\n  },\n  LINKEDIN: {\n    icon: ['fab', 'linkedin'],\n    link: 'https://linkedin.com/in/coopereli/',\n    text: 'LinkedIn',\n  },\n};\n\nfunction SocialLink(props) {\n  return (\n    <a\n      className=\"SocialLink\"\n      href={SOCIAL[props.type].link}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <div className=\"SocialLinkIcon\">\n        <FontAwesomeIcon icon={SOCIAL[props.type].icon} />\n      </div>\n    </a>\n  );\n}\n\nexport default SocialLink;\n","import React from 'react';\nimport SocialLink, { TYPES } from '../SocialLink';\n\nimport './index.css';\n\nfunction Description() {\n  return (\n    <div className=\"Description\">\n      <SocialLink type={TYPES.LINKEDIN} />\n      <SocialLink type={TYPES.GITHUB} />\n      <SocialLink type={TYPES.EMAIL} />\n    </div>\n  );\n}\n\nexport default Description;\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faEnvelopeSquare } from '@fortawesome/free-solid-svg-icons'\nimport Name from '../components/presentational/Name';\nimport Description from '../components/presentational/Description';\n\nimport './App.css';\n\nlibrary.add(fab, faEnvelopeSquare);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Name />\n      <Description />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}